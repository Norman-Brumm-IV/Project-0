package core;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

//importing and 'using' them all (just sending the args to the correct class)
// thinking about separating them all into a 'master' class for each of the Delete, Get, Patch, Post and Put classes. It will depend on how the input comes in
import delete.*; 
import get.*;
import io.javalin.Javalin;
import patch.*;
import post.*;
import put.*;
import tools.InputTextParser;
import tools.StringArraytoLongString;

public class GetInput {
	
	// TODO: Create generic get statements so I can replace things in the classes with calls to another class
	// TODO: make this actually use a DAO and not whats currently in place
	// TODO: look up error codes and use the correct ones when its not specified
	
	//this class will get the input from whatever we are using to get input and then send it out from here
	
	/*
	 *   USERNAME FOR DATABASE: neain2008
	 */
	
	public static void main(String[] args) {
		Javalin app = Javalin.create().start(7000);
		
		
		Connection conn = ConnectionDriver.getConnection();
		//"jdbc:mariadb://<RDS ENDPOINT FROM AWS RDS SERVICE>:<port>/<DATABASE NAME>?user=<USER NAME>&password=<PASSWORD>"

		String getAccountsTable = "SELECT * FROM accounts";
		String getCustomersTable = "SELECT * FROM customers";
		String getUserAccountsTable = "SELECT * FROM useraccounts";
		
		try {
			int count = 1;
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(getAccountsTable);

            System.out.println("================ Account Amount table =================");
            while(rs.next()) {
                System.out.println(count + ". Account #: [" + rs.getString("account") + "]   amount: [" + rs.getString("amount") + "]");
                count++;
            }
            System.out.println("=============== /Account Amount table =================");
            System.out.println();
            System.out.println();
            
            
            rs = stmt.executeQuery(getCustomersTable);
            count = 1;
            System.out.println("================ Customers table =================");
            while(rs.next()) {
                System.out.println(count + ". SSN: [" + rs.getInt("ssn") + "]   Name: [" + rs.getString("name") + "]");
                count++;
            }
            System.out.println("=============== /Customers table =================");
            System.out.println();
            System.out.println();
            
            
            rs = stmt.executeQuery(getUserAccountsTable);

            count = 1;
            System.out.println("================ Users Accounts Table =================");
            while(rs.next()) {
                System.out.println(count + ". SSN: [" + rs.getInt("ssn") + "]   Account #: [" + rs.getInt("account") + "]");
                count++;
            }
            System.out.println("=============== /Users Accounts Table =================");
            System.out.println();
            System.out.println();
            
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
		
		
//  		TODO: Remove this comment block. its only here to show what CAN be done
//  		app.get("/hello", ctx -> ctx.html("Hello World!"));
// 		app.post("/send-data", ctx -> {
//  			System.out.println(ctx.body());
//  		});
//		
		
		// array [0] will always be the sendBack code
		// just going down the list as its shown in my package explorer. I will be replacing the placeHolder variable with some kinda string parsing

		
	// DeleteClientsVar statement. The text input needs to just be an ID. This will delete all accounts of a user and so there needs to be a check of some sort before getting to this step
		app.delete("/clients-var", ctx -> {
			String[] sendBack;
			sendBack = DeleteClientsVar.delCliV(ctx.body(), conn);
			ctx.status(Integer.parseInt(sendBack[0]));
		});

	// DeleteClientsVarAccounts statement. Needs the ssn, then the account number. Currently split by a <>, will eventually adjust to take JSON. This will delete the account and void any money
		app.delete("/clients-var-accounts", ctx -> {
			String[] sendBack;
			String parsedText = InputTextParser.parsText(ctx.body());
			sendBack = DeleteClientsVarAccountsVar.delCliVarAcc(parsedText, conn);
			ctx.status(Integer.parseInt(sendBack[0]));
		});
		
	// GetClients - returns all the client names seperated by a new line char
		app.get("/clients", ctx -> {
			String[] sendBack;
			sendBack = GetClients.getCli(conn);
			ctx.status(Integer.parseInt(sendBack[0]));
			// TODO: ctx.json({something});
			ctx.html(StringArraytoLongString.toLongString(sendBack));
		});
		
	// GetClientsVar - needs a ssn number
		app.get("/clients-var", ctx -> {
			String[] sendBack;
			sendBack = GetClientsVar.getCliVar(ctx.body(), conn);
			ctx.status(Integer.parseInt(sendBack[0]));
			ctx.html(sendBack[1]);
		});
		
	// GetClientsVarAccounts - needs a ssn number.
		app.get("/clients-var-accounts", ctx -> {
			String[] sendBack;
			sendBack = GetClientsVarAccounts.getCliVarAcc(ctx.body(), conn);
			ctx.status(Integer.parseInt(sendBack[0]));
			ctx.html(StringArraytoLongString.toLongString(sendBack));
		});
		
	// GetClientsVarAccountsBetween - needs ssn, min amount, max amount. Currently taking input with <> between fields, I want to take in JSON later (maybe as a stretch goal) so im sending the text to an empty class that will change it from JSON later
			app.get("/clients-var-accounts-between", ctx -> {
				String[] sendBack;
				String parsedText = InputTextParser.parsText(ctx.body());
				sendBack = GetClientsVarAccountsBetween.getCliVarAccBet(parsedText, conn);
				ctx.status(Integer.parseInt(sendBack[0]));
				ctx.html(StringArraytoLongString.toLongString(sendBack));
			});
	
	// GetClientsVarAccountsVar - needs ssn, account number
			app.get("/clients-var-accounts-var", ctx -> {
				String[] sendBack;
				String parsedText = InputTextParser.parsText(ctx.body());
				sendBack = GetClientsVarAccountsVar.getCliAccVar(parsedText, conn);
				ctx.status(Integer.parseInt(sendBack[0]));
				ctx.html(StringArraytoLongString.toLongString(sendBack));
			});
	
	// PatchClientsVarAccountsVar - needs ssn, account number, deposit/withdraw, amount
			app.patch("/clients-var-accounts-var", ctx -> {
				String[] sendBack;
				String parsedText = InputTextParser.parsText(ctx.body());
				sendBack = PatchClientsVarAccountsVar.patCliVarAccVar(parsedText, conn);
				ctx.status(Integer.parseInt(sendBack[0]));
			});
	
	//PatchVlientsVarAccountsVarTransferVar - Account number from, account number to, amount
			app.patch("/clients-var-accounts-var-transfer-var", ctx -> {
				String[] sendBack;
				String parsedText = InputTextParser.parsText(ctx.body());
				sendBack = PatchClientsVarAccountsVarTransferVar.patCliVarAccVarTra(parsedText, conn);
				ctx.status(Integer.parseInt(sendBack[0]));
			});

			// TODO: error handling if the person already exists
	// TODO PostClients - needs ssn, name
			app.post("/clients", ctx -> {
				String[] sendBack;
				String parsedText = InputTextParser.parsText(ctx.body());
				sendBack = PostClients.posCli(parsedText, conn);
				ctx.status(Integer.parseInt(sendBack[0]));
			});
	
	//TODO PostClientsVarAccounts - needs ssn
			app.post("/clients-var-accounts", ctx -> {
				String[] sendBack;
				String parsedText = InputTextParser.parsText(ctx.body());
				sendBack = PostClientsVarAccounts.posCliVarAcc(parsedText, conn);
				ctx.status(Integer.parseInt(sendBack[0]));
			});
	
	//TODO PutClientsVar
			app.put("/clients-var", ctx -> {
				String[] sendBack;
				sendBack = PutClientsVar.putCliVar(ctx.body());
				ctx.status(Integer.parseInt(sendBack[0]));
			});
	
	//TODO PutClientsVarAccounts
			app.put("/clients-var-accounts", ctx -> {
				String[] sendBack;
				sendBack = PutClientsVarAccountsVar.putCliVarAcc(ctx.body());
				ctx.status(Integer.parseInt(sendBack[0]));
			});
		
	}

}
