package patch;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**	Withdraw/deposit given amount (Body: {"deposit":500} or {"withdraw":250} return 404 if no account or client exists return 422 if insufficient funds **/
public class PatchClientsVarAccountsVar {
	/**	Withdraw/deposit given amount (Body: {"deposit":500} or {"withdraw":250} return 404 if no account or client exists return 422 if insufficient funds 
	 * @throws SQLException **/
	public static String[] patCliVarAccVar(String args, Connection conn) throws SQLException {
		String[] accounts = new String[2];
		String[] fullString = args.split("<>");
		double amountInAccount = -1;
        // get the amount from the account from the specific client. Account is unique, so only 1 result
		String sql = "SELECT * FROM useraccounts INNER JOIN (accounts) USING (account) WHERE ssn = ? AND account = ?";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		
		if(fullString.length<4)
			return new String[] {"404"};

		pstmt.setString(1, fullString[0]);
		pstmt.setString(2, fullString[1]);

		accounts[0] = "200";
		ResultSet rs = pstmt.executeQuery();
		
		//leaving it in a while loop just to make sure that it has a next and wont error
		while(rs.next())
			amountInAccount=rs.getDouble("amount");
		
		if(amountInAccount<0)
			return new String[] {"404"};
		
		switch(fullString[3].toLowerCase()) {
		case "deposit":
			// not changing the amount in the database, just the local variable
			amountInAccount = deposit(amountInAccount, Double.parseDouble(fullString[4]));
			break;
		case "withdraw":
			// not changing the amount in the database, just the local variable
			amountInAccount = withdraw(amountInAccount, Double.parseDouble(fullString[4]));
		}
		
		if(amountInAccount<0)
			return new String[] {"422"};

		sql = "UPDATE accounts SET amount=? WHERE account=?";
		pstmt.setDouble(1, amountInAccount);
		pstmt.setString(2, fullString[1]);

		
		
		return new String[] {"404", "422"};
	}
	
	private static double withdraw(double accountBalance, double removedFunds) {
		accountBalance -= removedFunds;
		return accountBalance;
	}

	private static double deposit(double accountBalance, double addedFunds) {
		accountBalance += addedFunds;
		return accountBalance;
	}
}
