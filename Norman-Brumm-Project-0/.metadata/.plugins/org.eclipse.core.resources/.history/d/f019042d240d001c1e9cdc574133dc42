package patch;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import sqlCommands.SQLGet;
import sqlCommands.SQLPatch;

/**	transfer funds from account 7 to account 8 (Body: {"amount":500}) return 404 if no client or either account exists return 422 if insufficient funds **/
public class PatchClientsVarAccountsVarTransferVar {
	/**	transfer funds from account 7 to account 8 (Body: {"amount":500}) return 404 if no client or either account exists return 422 if insufficient funds 
	 * input - From account, To account, funds
	 * @throws SQLException **/
	public static String[] patCliVarAccVarTra(String args, Connection conn) throws SQLException {
		String[] fullString = args.split("<>");
		String tableName = "accounts";
		String[] orMathStatements = {"account =","account ="};
		
		if(fullString.length<3)
			return new String[] {"404"};
		
		//saving the account that money is being transferred out of
		String savedAccount = String.valueOf(fullString[0]);
		
        // the first account should be the account we are transferring from, the second we are transferring to
		double[] accountBalance = new double[2];
		
		
		ResultSet rs = SQLGet.getInfoWhereAndOr(false, conn, tableName, orMathStatements, fullString);
		
		int i = 0;
		while(rs.next()) {
			// shouldnt need this if, there should only be 2 results. There should also not be LESS than 2 results
			if(i<2) {
				accountBalance[i] = rs.getDouble("amount");
				// turns out it returns them in the same order every time, no matter which was first. so some logic is going to be needed to make sure that the correct account gets reduced
				fullString[i] = rs.getInt("account")+ "";
			}
			i++;
		}
		
		// if there were less than 2 accounts, something was wrong
		if(i<2)
			return new String[] {"404"};
		
		int num;
		if(savedAccount.equals(fullString[0]))
			num = 0;
		else
			num = 1;
		
		accountBalance[num] -= Double.parseDouble(fullString[2]);
		
		//if removing the funds from the first account would send it negative, then return the code without changing the database
		if(accountBalance[0]<0)
			return new String[] {"422"};

		accountBalance[1-num] += Double.parseDouble(fullString[2]);
		
		// updating the accounts
		SQLPatch.updateValue(conn, tableName, "amount", String.valueOf(accountBalance[0]), "account", fullString[0]);
		SQLPatch.updateValue(conn, tableName, "amount", String.valueOf(accountBalance[1]), "account", fullString[1]);

		return new String[] {"200"};
	}
}
